{
	"$schema": "https://json.schemastore.org/sarif-2.1.0.json",
	"version": "2.1.0",
	"runs": [
		{
			"tool": {
				"driver": {
					"name": "CodeQL",
					"organization": "GitHub",
					"semanticVersion": "2.22.1",
					"notifications": [
						{
							"id": "py/baseline/expected-extracted-files",
							"name": "py/baseline/expected-extracted-files",
							"shortDescription": {
								"text": "Expected extracted files"
							},
							"fullDescription": {
								"text": "Files appearing in the source archive that are expected to be extracted."
							},
							"defaultConfiguration": {
								"enabled": true
							},
							"properties": {
								"tags": [
									"expected-extracted-files",
									"telemetry"
								]
							}
						}
					],
					"rules": [
						{
							"id": "py/quantum-readiness/cbom/symmetric-padding-schemes",
							"name": "py/quantum-readiness/cbom/symmetric-padding-schemes",
							"shortDescription": {
								"text": "Symmetric Padding Schemes"
							},
							"fullDescription": {
								"text": "Finds all potential usage of padding schemes used with symmeric algorithms."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of padding schemes used with symmeric algorithms.",
								"id": "py/quantum-readiness/cbom/symmetric-padding-schemes",
								"kind": "problem",
								"name": "Symmetric Padding Schemes",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/hash-algorithms",
							"name": "py/quantum-readiness/cbom/hash-algorithms",
							"shortDescription": {
								"text": "Hash Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
								"id": "py/quantum-readiness/cbom/hash-algorithms",
								"kind": "problem",
								"name": "Hash Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/key-exchange",
							"name": "py/quantum-readiness/cbom/key-exchange",
							"shortDescription": {
								"text": "Key Exchange Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of key exchange using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of key exchange using the supported libraries.",
								"id": "py/quantum-readiness/cbom/key-exchange",
								"kind": "problem",
								"name": "Key Exchange Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/key-derivation",
							"name": "py/quantum-readiness/cbom/key-derivation",
							"shortDescription": {
								"text": "Key Derivation Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of key derivation using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of key derivation using the supported libraries.",
								"id": "py/quantum-readiness/cbom/key-derivation",
								"kind": "problem",
								"name": "Key Derivation Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/unkown-iv-sources",
							"name": "py/quantum-readiness/cbom/unkown-iv-sources",
							"shortDescription": {
								"text": "Unknown Initialization Vector (IV) or nonces"
							},
							"fullDescription": {
								"text": "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
								"id": "py/quantum-readiness/cbom/unkown-iv-sources",
								"kind": "problem",
								"name": "Unknown Initialization Vector (IV) or nonces",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/elliptic-curve-algorithms",
							"name": "py/quantum-readiness/cbom/elliptic-curve-algorithms",
							"shortDescription": {
								"text": "Elliptic Curve Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of elliptic curve algorithms using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
								"id": "py/quantum-readiness/cbom/elliptic-curve-algorithms",
								"kind": "problem",
								"name": "Elliptic Curve Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/signing-algorithms",
							"name": "py/quantum-readiness/cbom/signing-algorithms",
							"shortDescription": {
								"text": "Signing Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of signing algorithms using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of signing algorithms using the supported libraries.",
								"id": "py/quantum-readiness/cbom/signing-algorithms",
								"kind": "problem",
								"name": "Signing Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/asymmetric-key-generation",
							"name": "py/quantum-readiness/cbom/asymmetric-key-generation",
							"shortDescription": {
								"text": "Known asymmetric key source generation"
							},
							"fullDescription": {
								"text": "Finds all known potential sources for asymmetric key generation while using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
								"id": "py/quantum-readiness/cbom/asymmetric-key-generation",
								"kind": "problem",
								"name": "Known asymmetric key source generation",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
							"name": "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
							"shortDescription": {
								"text": "Asymmetric Encryption Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
								"id": "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
								"kind": "problem",
								"name": "Asymmetric Encryption Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
							"name": "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
							"shortDescription": {
								"text": "Authenticated Encryption Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of authenticated encryption schemes using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
								"id": "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
								"kind": "problem",
								"name": "Authenticated Encryption Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
							"name": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
							"shortDescription": {
								"text": "All Cryptographic Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
								"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
								"kind": "problem",
								"name": "All Cryptographic Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/block-cipher-mode",
							"name": "py/quantum-readiness/cbom/block-cipher-mode",
							"shortDescription": {
								"text": "Block cipher mode of operation"
							},
							"fullDescription": {
								"text": "Finds all potential block cipher modes of operations using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential block cipher modes of operations using the supported libraries.",
								"id": "py/quantum-readiness/cbom/block-cipher-mode",
								"kind": "problem",
								"name": "Block cipher mode of operation",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/asymmetric-padding-schemes",
							"name": "py/quantum-readiness/cbom/asymmetric-padding-schemes",
							"shortDescription": {
								"text": "Asymmetric Padding Schemes"
							},
							"fullDescription": {
								"text": "Finds all potential usage of padding schemes used with asymmeric algorithms."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of padding schemes used with asymmeric algorithms.",
								"id": "py/quantum-readiness/cbom/asymmetric-padding-schemes",
								"kind": "problem",
								"name": "Asymmetric Padding Schemes",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/all-asymmetric-algorithms",
							"name": "py/quantum-readiness/cbom/all-asymmetric-algorithms",
							"shortDescription": {
								"text": "All Asymmetric Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
								"id": "py/quantum-readiness/cbom/all-asymmetric-algorithms",
								"kind": "problem",
								"name": "All Asymmetric Algorithms",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/iv-sources",
							"name": "py/quantum-readiness/cbom/iv-sources",
							"shortDescription": {
								"text": "Initialization Vector (IV) or nonces"
							},
							"fullDescription": {
								"text": "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
								"id": "py/quantum-readiness/cbom/iv-sources",
								"kind": "problem",
								"name": "Initialization Vector (IV) or nonces",
								"problem.severity": "error"
							}
						},
						{
							"id": "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
							"name": "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
							"shortDescription": {
								"text": "Symmetric Encryption Algorithms"
							},
							"fullDescription": {
								"text": "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
							},
							"defaultConfiguration": {
								"enabled": true,
								"level": "error"
							},
							"properties": {
								"tags": [
									"cbom",
									"cryptography"
								],
								"description": "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
								"id": "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
								"kind": "problem",
								"name": "Symmetric Encryption Algorithms",
								"problem.severity": "error"
							}
						}
					]
				},
				"extensions": [
					{
						"name": "codeql/python-queries",
						"semanticVersion": "1.6.0+4ece8abc3032a266eb4b9839442d8be5084552ea",
						"locations": [
							{
								"uri": "file:///opt/hostedtoolcache/CodeQL/2.22.1/x64/codeql/qlpacks/codeql/python-queries/1.6.0/",
								"description": {
									"text": "The QL pack root directory."
								},
								"properties": {
									"tags": [
										"CodeQL/LocalPackRoot"
									]
								}
							},
							{
								"uri": "file:///opt/hostedtoolcache/CodeQL/2.22.1/x64/codeql/qlpacks/codeql/python-queries/1.6.0/qlpack.yml",
								"description": {
									"text": "The QL pack definition file."
								},
								"properties": {
									"tags": [
										"CodeQL/LocalPackDefinitionFile"
									]
								}
							}
						]
					},
					{
						"name": "codeql/python-all",
						"semanticVersion": "4.0.10+4ece8abc3032a266eb4b9839442d8be5084552ea",
						"locations": [
							{
								"uri": "file:///opt/hostedtoolcache/CodeQL/2.22.1/x64/codeql/qlpacks/codeql/python-queries/1.6.0/.codeql/libraries/codeql/python-all/4.0.10/",
								"description": {
									"text": "The QL pack root directory."
								},
								"properties": {
									"tags": [
										"CodeQL/LocalPackRoot"
									]
								}
							},
							{
								"uri": "file:///opt/hostedtoolcache/CodeQL/2.22.1/x64/codeql/qlpacks/codeql/python-queries/1.6.0/.codeql/libraries/codeql/python-all/4.0.10/qlpack.yml",
								"description": {
									"text": "The QL pack definition file."
								},
								"properties": {
									"tags": [
										"CodeQL/LocalPackDefinitionFile"
									]
								}
							}
						]
					},
					{
						"name": "codeql/threat-models",
						"semanticVersion": "1.0.26+4ece8abc3032a266eb4b9839442d8be5084552ea",
						"locations": [
							{
								"uri": "file:///opt/hostedtoolcache/CodeQL/2.22.1/x64/codeql/qlpacks/codeql/python-queries/1.6.0/.codeql/libraries/codeql/threat-models/1.0.26/",
								"description": {
									"text": "The QL pack root directory."
								},
								"properties": {
									"tags": [
										"CodeQL/LocalPackRoot"
									]
								}
							},
							{
								"uri": "file:///opt/hostedtoolcache/CodeQL/2.22.1/x64/codeql/qlpacks/codeql/python-queries/1.6.0/.codeql/libraries/codeql/threat-models/1.0.26/qlpack.yml",
								"description": {
									"text": "The QL pack definition file."
								},
								"properties": {
									"tags": [
										"CodeQL/LocalPackDefinitionFile"
									]
								}
							}
						]
					}
				]
			},
			"invocations": [
				{
					"toolExecutionNotifications": [
						{
							"locations": [
								{
									"physicalLocation": {
										"artifactLocation": {
											"uri": "projjwalraj707/cbom-action/test-app/main.py",
											"uriBaseId": "%SRCROOT%",
											"index": 0
										}
									}
								}
							],
							"message": {
								"text": ""
							},
							"level": "none",
							"descriptor": {
								"id": "py/baseline/expected-extracted-files",
								"index": 0
							},
							"properties": {
								"formattedMessage": {
									"text": ""
								}
							}
						}
					],
					"executionSuccessful": true
				}
			],
			"artifacts": [
				{
					"location": {
						"uri": "projjwalraj707/cbom-action/test-app/main.py",
						"uriBaseId": "%SRCROOT%",
						"index": 0
					}
				}
			],
			"results": [
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 20,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 18,
									"endLine": 22,
									"snippet": {
										"text": "# GOOD\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=os.urandom(16),\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "90ff4f93fea2ed89:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 33,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 31,
									"endLine": 35,
									"snippet": {
										"text": "iterations = 1000\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=keylen,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "59aaf148d1eaf40:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 51,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 49,
									"endLine": 53,
									"snippet": {
										"text": "sharedinfo = b\"ANSI X9.63 Example\"\nxkdf = X963KDF(\n    algorithm=hashes.SHA256(),\n    length=32,\n    sharedinfo=sharedinfo,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "65e0d1f77c1e8a72:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 59,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 57,
									"endLine": 61,
									"snippet": {
										"text": "salt = b'test'\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "8034b3cf6b428adf:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 69,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 67,
									"endLine": 71,
									"snippet": {
										"text": "keyLen= 4\nckdf = ConcatKDFHash(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    otherinfo=otherinfo,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "872f2cd61c85804b:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 79,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 77,
									"endLine": 81,
									"snippet": {
										"text": "keyLen = 1\nckdf = ConcatKDFHMAC(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "346f5dc0308f2f9c:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 92,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 90,
									"endLine": 94,
									"snippet": {
										"text": "# BAD KDF ALGORITHM\nhkdf = HKDF(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "94c39303d85611bc:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 102,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 100,
									"endLine": 104,
									"snippet": {
										"text": "# BAD KDF ALGORITHM\nhkdf = HKDFExpand(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    info = info)\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "1475b60b8cd416e7:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 115,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 113,
									"endLine": 117,
									"snippet": {
										"text": "context = b\"KBKDF HMAC Context\"\nkdf = KBKDFHMAC(\n    algorithm=hashes.SHA256(),\n    mode=mode,\n    length=keyLen,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "442e6f745ba4ed9e:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/hash-algorithms",
					"ruleIndex": 1,
					"rule": {
						"id": "py/quantum-readiness/cbom/hash-algorithms",
						"index": 1
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 128,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 126,
									"endLine": 130,
									"snippet": {
										"text": "# GOOD\nkdf = KBKDFHMAC(\n    algorithm=hashes.SHA256(),\n    mode=Mode.CounterMode,\n    length=32,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "c324f514673fb477:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm PBKDF2HMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 19,
									"startColumn": 7,
									"endLine": 24,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 17,
									"endLine": 26,
									"snippet": {
										"text": "\n# GOOD\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=os.urandom(16),\n    iterations=480000,\n)\n\n# BAD SALT Length\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "1b7cf741f5e1fc6b:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm PBKDF2HMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 32,
									"startColumn": 7,
									"endLine": 37,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 30,
									"endLine": 39,
									"snippet": {
										"text": "# BAD Iterations\niterations = 1000\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=keylen,\n    salt=salt,\n    iterations=iterations,\n)\n\n# BAD KDF ALGORITHM\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "2e2761271b5220f5:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm SCRYPT"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 40,
									"startColumn": 7,
									"endLine": 46,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 38,
									"endLine": 48,
									"snippet": {
										"text": "\n# BAD KDF ALGORITHM\nkdf = Scrypt(\n    salt=salt,\n    length=32,\n    n=2**14,\n    r=8,\n    p=1,\n)\n\n# BAD KDF ALGORITHM\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "4c26b842b854be72:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm X963KDF"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 50,
									"startColumn": 8,
									"endLine": 54,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 48,
									"endLine": 56,
									"snippet": {
										"text": "# BAD KDF ALGORITHM\nsharedinfo = b\"ANSI X9.63 Example\"\nxkdf = X963KDF(\n    algorithm=hashes.SHA256(),\n    length=32,\n    sharedinfo=sharedinfo,\n)\n\n# BAD SALT RANDOM SOURCE\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "83956dcd39df642a:1",
						"primaryLocationStartColumnFingerprint": "7"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm PBKDF2HMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 58,
									"startColumn": 7,
									"endLine": 63,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 56,
									"endLine": 65,
									"snippet": {
										"text": "# BAD SALT RANDOM SOURCE\nsalt = b'test'\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=salt,\n    iterations=480000,\n)\n\n# BAD KEY LENGTH\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "8d7b983591a10af0:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm CONCATKDFHASH"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 68,
									"startColumn": 8,
									"endLine": 72,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 66,
									"endLine": 74,
									"snippet": {
										"text": "otherinfo = b\"concatkdf-example\"\nkeyLen= 4\nckdf = ConcatKDFHash(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    otherinfo=otherinfo,\n)\n\n# BAD SALT\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "30f3c3e6ff03e948:1",
						"primaryLocationStartColumnFingerprint": "7"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm CONCATKDFHMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 78,
									"startColumn": 8,
									"endLine": 83,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 76,
									"endLine": 85,
									"snippet": {
										"text": "# BAD KEY LENGTH\nkeyLen = 1\nckdf = ConcatKDFHMAC(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    salt=salt,\n    otherinfo=otherinfo,\n)\n\n# BAD SALT\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "f110a6ccdc69de21:1",
						"primaryLocationStartColumnFingerprint": "7"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm HKDF"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 91,
									"startColumn": 8,
									"endLine": 96,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 89,
									"endLine": 98,
									"snippet": {
										"text": "info = b\"hkdf-example\"\n# BAD KDF ALGORITHM\nhkdf = HKDF(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    salt=salt,\n    info=info,\n)\n\n# BAD KEY LENGTH\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "b3bb27ef4c1db0f0:1",
						"primaryLocationStartColumnFingerprint": "7"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm HKDFEXPAND"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 101,
									"startColumn": 8,
									"endLine": 104,
									"endColumn": 17
								},
								"contextRegion": {
									"startLine": 99,
									"endLine": 106,
									"snippet": {
										"text": "keyLen = 1\n# BAD KDF ALGORITHM\nhkdf = HKDFExpand(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    info = info)\n\n# BAD Key Length\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "d855c370b1977d4b:1",
						"primaryLocationStartColumnFingerprint": "7"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm KBKDFHMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 114,
									"startColumn": 7,
									"endLine": 124,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 112,
									"endLine": 126,
									"snippet": {
										"text": "label = b\"KBKDF HMAC Label\"\ncontext = b\"KBKDF HMAC Context\"\nkdf = KBKDFHMAC(\n    algorithm=hashes.SHA256(),\n    mode=mode,\n    length=keyLen,\n    rlen=4,\n    llen=4,\n    location=CounterLocation.BeforeFixed,\n    label=label,\n    context=context,\n    fixed=None,\n)\n\n# GOOD\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "d6f5026025381c43:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm KBKDFHMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 127,
									"startColumn": 7,
									"endLine": 137,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 125,
									"endLine": 139,
									"snippet": {
										"text": "\n# GOOD\nkdf = KBKDFHMAC(\n    algorithm=hashes.SHA256(),\n    mode=Mode.CounterMode,\n    length=32,\n    rlen=4,\n    llen=4,\n    location=CounterLocation.BeforeFixed,\n    label=label,\n    context=context,\n    fixed=None,\n)\n\n# GOOD \n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "b059368eff9df88a:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm KBKDFCMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 142,
									"startColumn": 7,
									"endLine": 152,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 140,
									"endLine": 154,
									"snippet": {
										"text": "label = b\"KBKDF CMAC Label\"\ncontext = b\"KBKDF CMAC Context\"\nkdf = KBKDFCMAC(\n    algorithm=algorithms.AES,\n    mode=Mode.CounterMode,\n    length=32,\n    rlen=4,\n    llen=4,\n    location=CounterLocation.BeforeFixed,\n    label=label,\n    context=context,\n    fixed=None,\n)\n\n# BAD Key Length\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "da76f71bb368b:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/key-derivation",
					"ruleIndex": 3,
					"rule": {
						"id": "py/quantum-readiness/cbom/key-derivation",
						"index": 3
					},
					"message": {
						"text": "Use of key derivation algorithm KBKDFCMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 162,
									"startColumn": 7,
									"endLine": 172,
									"endColumn": 2
								},
								"contextRegion": {
									"startLine": 160,
									"endLine": 172,
									"snippet": {
										"text": "label = b\"KBKDF CMAC Label\"\ncontext = b\"KBKDF CMAC Context\"\nkdf = KBKDFCMAC(\n    algorithm=algorithms.AES,\n    mode=mode,\n    length=keyLen,\n    rlen=4,\n    llen=4,\n    location=CounterLocation.BeforeFixed,\n    label=label,\n    context=context,\n    fixed=None,\n)\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "94921ca9e1026057:1",
						"primaryLocationStartColumnFingerprint": "6"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm PBKDF2HMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 1,
									"startColumn": 55,
									"endColumn": 65
								},
								"contextRegion": {
									"startLine": 1,
									"endLine": 3,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives.ciphers import algorithms\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "8ab7b07e2843c1a1:1",
						"primaryLocationStartColumnFingerprint": "54"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SCRYPT"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 3,
									"startColumn": 55,
									"endColumn": 61
								},
								"contextRegion": {
									"startLine": 1,
									"endLine": 5,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives.ciphers import algorithms\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHash\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHMAC\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "4f5bbd3e89746f27:1",
						"primaryLocationStartColumnFingerprint": "54"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm CONCATKDFHASH"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 4,
									"startColumn": 58,
									"endColumn": 71
								},
								"contextRegion": {
									"startLine": 2,
									"endLine": 6,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.ciphers import algorithms\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHash\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHMAC\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "c85a2bc20e05089e:1",
						"primaryLocationStartColumnFingerprint": "57"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm CONCATKDFHMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 5,
									"startColumn": 58,
									"endColumn": 71
								},
								"contextRegion": {
									"startLine": 3,
									"endLine": 7,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHash\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHMAC\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDFExpand\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "4624cef2333661f:1",
						"primaryLocationStartColumnFingerprint": "57"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm HKDF"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 6,
									"startColumn": 53,
									"endColumn": 57
								},
								"contextRegion": {
									"startLine": 4,
									"endLine": 8,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHash\nfrom cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHMAC\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDFExpand\nfrom cryptography.hazmat.primitives.kdf.kbkdf import (\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "658e7de5b6cce68e:1",
						"primaryLocationStartColumnFingerprint": "52"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm HKDFEXPAND"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 7,
									"startColumn": 53,
									"endColumn": 63
								},
								"contextRegion": {
									"startLine": 5,
									"endLine": 9,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.kdf.concatkdf import ConcatKDFHMAC\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDFExpand\nfrom cryptography.hazmat.primitives.kdf.kbkdf import (\n   CounterLocation, KBKDFHMAC, Mode\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "327542eddf471a6a:1",
						"primaryLocationStartColumnFingerprint": "52"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm KBKDFHMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 9,
									"startColumn": 21,
									"endColumn": 30
								},
								"contextRegion": {
									"startLine": 7,
									"endLine": 11,
									"snippet": {
										"text": "from cryptography.hazmat.primitives.kdf.hkdf import HKDFExpand\nfrom cryptography.hazmat.primitives.kdf.kbkdf import (\n   CounterLocation, KBKDFHMAC, Mode\n)\nfrom cryptography.hazmat.primitives.kdf.kbkdf import (\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "a4c8fcee892e39b0:1",
						"primaryLocationStartColumnFingerprint": "17"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm KBKDFCMAC"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 12,
									"startColumn": 21,
									"endColumn": 30
								},
								"contextRegion": {
									"startLine": 10,
									"endLine": 14,
									"snippet": {
										"text": ")\nfrom cryptography.hazmat.primitives.kdf.kbkdf import (\n   CounterLocation, KBKDFCMAC\n)\nfrom cryptography.hazmat.primitives.kdf.x963kdf import X963KDF\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "85deabb5848455fb:1",
						"primaryLocationStartColumnFingerprint": "17"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm X963KDF"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 14,
									"startColumn": 56,
									"endColumn": 63
								},
								"contextRegion": {
									"startLine": 12,
									"endLine": 16,
									"snippet": {
										"text": "   CounterLocation, KBKDFCMAC\n)\nfrom cryptography.hazmat.primitives.kdf.x963kdf import X963KDF\nfrom cryptography.hazmat.primitives import hashes\nimport os\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "3ce82d89079c772d:1",
						"primaryLocationStartColumnFingerprint": "55"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 20,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 18,
									"endLine": 22,
									"snippet": {
										"text": "# GOOD\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=os.urandom(16),\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "90ff4f93fea2ed89:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 33,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 31,
									"endLine": 35,
									"snippet": {
										"text": "iterations = 1000\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=keylen,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "59aaf148d1eaf40:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 51,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 49,
									"endLine": 53,
									"snippet": {
										"text": "sharedinfo = b\"ANSI X9.63 Example\"\nxkdf = X963KDF(\n    algorithm=hashes.SHA256(),\n    length=32,\n    sharedinfo=sharedinfo,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "65e0d1f77c1e8a72:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 59,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 57,
									"endLine": 61,
									"snippet": {
										"text": "salt = b'test'\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "8034b3cf6b428adf:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 69,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 67,
									"endLine": 71,
									"snippet": {
										"text": "keyLen= 4\nckdf = ConcatKDFHash(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    otherinfo=otherinfo,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "872f2cd61c85804b:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 79,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 77,
									"endLine": 81,
									"snippet": {
										"text": "keyLen = 1\nckdf = ConcatKDFHMAC(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "346f5dc0308f2f9c:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 92,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 90,
									"endLine": 94,
									"snippet": {
										"text": "# BAD KDF ALGORITHM\nhkdf = HKDF(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    salt=salt,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "94c39303d85611bc:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 102,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 100,
									"endLine": 104,
									"snippet": {
										"text": "# BAD KDF ALGORITHM\nhkdf = HKDFExpand(\n    algorithm=hashes.SHA256(),\n    length=keyLen,\n    info = info)\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "1475b60b8cd416e7:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 115,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 113,
									"endLine": 117,
									"snippet": {
										"text": "context = b\"KBKDF HMAC Context\"\nkdf = KBKDFHMAC(\n    algorithm=hashes.SHA256(),\n    mode=mode,\n    length=keyLen,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "442e6f745ba4ed9e:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				},
				{
					"ruleId": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
					"ruleIndex": 10,
					"rule": {
						"id": "py/quantum-readiness/cbom/all-cryptographic-algorithms",
						"index": 10
					},
					"message": {
						"text": "Use of algorithm SHA256"
					},
					"locations": [
						{
							"physicalLocation": {
								"artifactLocation": {
									"uri": "projjwalraj707/cbom-action/test-app/main.py",
									"uriBaseId": "%SRCROOT%",
									"index": 0
								},
								"region": {
									"startLine": 128,
									"startColumn": 15,
									"endColumn": 28
								},
								"contextRegion": {
									"startLine": 126,
									"endLine": 130,
									"snippet": {
										"text": "# GOOD\nkdf = KBKDFHMAC(\n    algorithm=hashes.SHA256(),\n    mode=Mode.CounterMode,\n    length=32,\n"
									}
								}
							}
						}
					],
					"partialFingerprints": {
						"primaryLocationLineHash": "c324f514673fb477:1",
						"primaryLocationStartColumnFingerprint": "10"
					}
				}
			],
			"automationDetails": {
				"id": "CBOM:projjwalraj707/cbom-action/python/"
			},
			"columnKind": "unicodeCodePoints",
			"properties": {
				"semmle.formatSpecifier": "sarifv2.1.0"
			}
		}
	]
}